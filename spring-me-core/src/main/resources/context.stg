group template;

sourceTemplate ::= [
    "Instance" : "sourceInstance",
    "InstanceReference" : "sourceInstanceReference",
    "StringRepresentation" : "sourceStringRepresentation",
    "List" : "sourceList",
    "Map" : "sourceMap"
]


stringConversion ::= [
    "java.lang.String" : "stringToString",
    "java.lang.Boolean" : "stringToBoolean",
    "java.lang.Byte" : "stringToByte",
    "java.lang.Short" : "stringToShort",
    "java.lang.Integer" : "stringToInteger",
    "java.lang.Long" : "stringToLong",
    "int" : "stringToIntPrimitive",
    "long" : "stringToLongPrimitive",
    "boolean" : "stringToBooleanPrimitive",
    "float" : "stringToFloatPrimitive",
    "double" : "stringToDoublePrimitive",
    default : "stringToDefault"
]

implementations() ::= <<
<if(beanFactoryType.interfaceNames)>implements <beanFactoryType.interfaceNames:{<it>};separator="\,"><endif> 
>>

template(destination, definitions, beanFactoryType) ::= <<
package <destination.packagename>;

/**
 * An object factory, providing access to a network of wired objects, 
 * some of them lazily instantiated. You can refer to some objects by 
 * name. The named objects managed by this class are:
 *
 * \<ul>
<definitions.publicInstances:list();separator="\n"> 
 * \</ul>
 * 
 */
public class <destination.classname> <implementations()>{

    <definitions.publicInstances:field();separator="\n">
  
  	/**
  	 * Constructs an instance of this bean factory.
  	 */
  	public <destination.classname>() {
  	    start();
  	}
  
    /**
     * Returns an object by looking it up by its name.
     *
     * @return The object with the given name, constructed by the <destination.classname>.
     * @see <destination.classname>
     * @throws <beanFactoryType.beansExceptionName> In case of problems creating the bean.
     */
    public synchronized Object getBean(String name) throws <beanFactoryType.beansExceptionName> {
        <definitions.publicInstances:dispatch();separator="\n">
        return null; // Keep the compiler happy
    }

    <definitions.publicInstances:createLazily();separator="\n">
    
    <definitions.instanceSources:create();separator="\n">
    
    <definitions.listSources:listCreate();separator="\n">

    <definitions.mapSources:mapCreate();separator="\n">

    /**
     * "Starts" the <destination.classname>; instances that have been 
     * configured to be loaded eagerly will be loaded, and their init-methods
     * will be called. 
     */
    private final void start() {
        <definitions.publicInstances:loadEagerly();separator="\n">
    }
    
    /**
     * "Stops" the <destination.classname>; instances that have an 
     * destroy-method defined will get that method invoked.
     */
    public final void stop() {
        <definitions.publicInstances:destroy();separator="\n">
    }
    
    	    
}
>>

destroy() ::= <<
<if (it.destroyMethod)>
<it.name>.<it.destroyMethod>();
<else>
// Skipping <it.name>
<endif>
>>


loadEagerly() ::= <<
<if (!it.lazyInit)>
get<it.name;format="className">();
<else>
// Skipping <it.name>
<endif>
>>

createLazily(instance) ::= <<
/**
 * Creates <instance>.
 */
private final <instance.type> get<instance.name;format="className">() {
    if (<instance.name> == null) {
        try {
            <if (it.factoryMethod)>
            <if (it.factoryInstance)>
            <instance.name> = get<instance.factoryInstance;format="className">().<instance.factoryMethod>(<instance.constructorArguments:constructorArgument();separator=", ">);
            <else>
            <instance.name> = <instance.referencedType>.<instance.factoryMethod>(<instance.constructorArguments:constructorArgument();separator=", ">);
            <endif>
            <else>
            <instance.name> = new <instance.type>(<instance.constructorArguments:constructorArgument();separator=", ">);
            <endif>
            <instance.setters:setter(name=instance.name);separator="\n">
            <if (it.initMethod)>
            <instance.name>.<instance.initMethod>();
            <endif>
        } catch(Exception e) {
            throw new <beanFactoryType.beansExceptionName>(e.getMessage());
        }
    }
    return <instance.name>;
}
>>

list() ::= <<
 * \<li><it.name> : {@link <it.type>}\</li>
>>


dispatch() ::= <<
if ("<it.name>".equals(name)) return get<it.name;format="className">();
>>


field() ::= <<
/**
 * A cached reference to the bean named "<it.name>".
 */
private <it.type> <it.name>;

>>

getter() ::= <<

/**
 * Returns the bean named "<it.name>". 
 *
 * @return The bean named "<it.name>".
 * @see #create<it.id;format="className">()
 */
private final <it.type> get<it.name;format="className">() {
    if (<it.name> == null) {
         <it.name> = create<it.id;format="className">();
    }
    return <it.name>;
}
>>


create(instance) ::= <<

/**
 * Creates <it>. 
 <if (instance.initMethod)>
 * Will call <instance.initMethod>() after the instance has been created.
 <endif>
 * 
 * @return One of the required instances of {@link <instance.type>}.
 */
private final <instance.type> create<instance.id;format="className">() {
    try {
        <if (instance.factoryMethod)>
        <if (instance.factoryInstance)>
        <instance.type> result = get<instance.factoryInstance;format="className">().<instance.factoryMethod>(<instance.constructorArguments:constructorArgument();separator=", ">);
        <else>
        <instance.type> result = <instance.type>.<instance.factoryMethod>(<instance.constructorArguments:constructorArgument();separator=", ">);
        <endif>
        <else>
        <instance.type> result = new <instance.type>(<instance.constructorArguments:constructorArgument();separator=", ">);
        <endif>
        <instance.setters:setter(name="result");separator="\n">
        <if (instance.initMethod)>
        result.<instance.initMethod>();
        <endif>
        return result;
    } catch(Exception e) {
        throw new <beanFactoryType.beansExceptionName>(e.getMessage());
    }
}
>>


constructorArgument() ::= <<
<source(type=it.type,source=it.source)>
>>


setter(name) ::= <<
<name>.set<it.name;format="className">(<source(type=it.type,source=it.source)>);
>>


source(type,source) ::= <<
<(sourceTemplate.(it.source.sourceType))(type=type,source=source)>
>>


sourceInstance(type,source) ::= <<
create<source.id;format="className">()
>>


sourceInstanceReference(type,source) ::= <<
get<source.name;format="className">()
>>


sourceStringRepresentation(type,source) ::= <<
<(stringConversion.(type))(source=source)>
>>


sourceList(type,source) ::= <<
create<source.id;format="className">()
>>

sourceMap(type,source) ::= <<
create<source.id;format="className">()
>>


stringToString(source) ::= <<
"<source.value;format="escapeJava">"
>>


stringToIntPrimitive(source) ::= <<
<source.value>
>>

stringToBoolean(source) ::= <<
new Boolean(<source.value>)
>>

stringToByte(source) ::= <<
new Byte(<source.value>)
>>

stringToShort(source) ::= <<
new Short(<source.value>)
>>

stringToInteger(source) ::= <<
new Integer(<source.value>)
>>

stringToLong(source) ::= <<
new Long(<source.value>)
>>

stringToLongPrimitive(source) ::= <<
<source.value>
>>

stringToFloatPrimitive(source) ::= <<
<source.value>
>>

stringToDoublePrimitive(source) ::= <<
<source.value>
>>

stringToBooleanPrimitive(source) ::= <<
<source.value>
>>


stringToDefault(source) ::= <<
null
>>


listCreate(instance) ::= <<

/**
 * Creates <it>.
 * 
 * @return A list of objects.
 */
private final <beanFactoryType.listImplementationName> create<instance.id;format="className">() {
    <beanFactoryType.listImplementationName> result = new <beanFactoryType.listImplementationName>();
    <instance.elementSources:addElement();separator="\n">
    return result;
}
>>

addElement(name) ::= <<
result.<beanFactoryType.listAppendMethodName>(<(sourceTemplate.(it.sourceType))(type="java.lang.Object",source=it)>);
>>

mapCreate(instance) ::= <<

/**
 * Creates <it>.
 * 
 * @return A map of objects.
 */
private final <beanFactoryType.mapImplementationName> create<instance.id;format="className">() {
    <beanFactoryType.mapImplementationName> result = new <beanFactoryType.mapImplementationName>();
    <instance.entries:addEntry();separator="\n">
    return result;
}
>>

addEntry() ::= <<
result.put(<(sourceTemplate.(it.key.sourceType))(type=it.key.type,source=it.key)>, <(sourceTemplate.(it.value.sourceType))(type=it.value.type,source=it.value)>);
>>